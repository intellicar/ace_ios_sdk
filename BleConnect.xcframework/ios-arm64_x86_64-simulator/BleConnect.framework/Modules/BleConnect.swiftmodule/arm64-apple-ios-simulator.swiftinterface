// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name BleConnect
@_exported import BleConnect
import CoreBluetooth
import CryptoKit
import Foundation
import Swift
import UIKit
import _Concurrency
@_hasMissingDesignatedInitializers open class GpsGnggaInfo : Swift.Codable {
  @objc deinit
  open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers open class GpsGnvtgInfo : Swift.Codable {
  @objc deinit
  open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class ReadData<T> {
  @objc deinit
}
@_hasMissingDesignatedInitializers open class GpsGpgsaInfo : Swift.Codable {
  public var modeMA: Swift.Int?
  public var mode123: Swift.Int?
  public var nprn: Swift.Int?
  public var prn12: [Swift.Int]
  public var pdop: Swift.Int?
  public var hdop: Swift.Int?
  public var vdop: Swift.Int?
  @objc deinit
  open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public enum State {
  case scanning
  case scanningStoped
  case found
  case notFound
  case connecting
  case failledToConnect
  case connected
  case disConnected
  case authorized
  case unAuthorized
  public static func == (a: BleConnect.State, b: BleConnect.State) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers open class GsmEng_3 : Swift.Codable {
  public var bcch: Swift.Int?
  public var dbm: Swift.Int?
  public var bsic: Swift.Int?
  @objc deinit
  open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
open class ACE {
  public var responseData: ((Foundation.Data, Swift.Error) -> ())?
  public var deviceInfo: ((Foundation.Data) -> ())?
  public var deviceBluetoothStatus: ((CoreBluetooth.CBManagerState) -> ())?
  public var connectionStatus: ((_ state: BleConnect.State, _ error: Swift.Error?) -> ())?
  required public init(config: BleConnect.BleConfig, enableDebug: Swift.Bool = false)
  public func scanAndConnect()
  public func disconnect()
  public func getBluetoothState() -> CoreBluetooth.CBManagerState?
  public func lock()
  public func _GSM_EBT(key: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers open class GpsGlgsvInner : Swift.Codable {
  @objc deinit
  open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers open class GpsGlgsvInfo : Swift.Codable {
  @objc deinit
  open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct BleConfig {
  public var isDebugEnabled: Swift.Bool
  public var rawBeaconDebug: Swift.Bool
  public var LA5BeaconDebug: Swift.Bool
  public let name: Swift.String
  public var scanTimeout: Swift.Double
  public var connectionTimeout: Swift.Double
  public init(isDebugEnabled: Swift.Bool = false, scanTimeout: Foundation.TimeInterval = 30, connectionTimeout: Foundation.TimeInterval = 30, name: Swift.String)
}
@_hasMissingDesignatedInitializers open class GpsGlgasInfo : Swift.Codable {
  @objc deinit
  open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers open class GpsGpgsvInner : Swift.Codable {
  @objc deinit
  open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers open class GpsGpgsvInfo : Swift.Codable {
  @objc deinit
  open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public typealias Byte = Swift.UInt8
public typealias Long = Swift.UInt64
public typealias ByteArray = [Swift.UInt8]
public typealias Short = Swift.UInt16
public typealias Response = [Swift.String : Any]
public typealias numberOfPermissionCount = Swift.Int
extension BleConnect.State : Swift.Equatable {}
extension BleConnect.State : Swift.Hashable {}
