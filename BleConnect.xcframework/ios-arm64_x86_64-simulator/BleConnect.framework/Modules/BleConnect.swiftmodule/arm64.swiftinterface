// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name BleConnect
@_exported import BleConnect
import CoreBluetooth
import CryptoKit
import Foundation
import Swift
import UIKit
import _Concurrency
public enum SwiftyJSONError : Swift.Int, Swift.Error {
  case unsupportedType
  case indexOutOfBounds
  case elementTooDeep
  case wrongType
  case notExist
  case invalidJSON
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension BleConnect.SwiftyJSONError : Foundation.CustomNSError {
  public static var errorDomain: Swift.String {
    get
  }
  public var errorCode: Swift.Int {
    get
  }
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
}
public enum Type : Swift.Int {
  case number
  case string
  case bool
  case array
  case dictionary
  case null
  case unknown
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct JSON {
  public init(data: Foundation.Data, options opt: Foundation.JSONSerialization.ReadingOptions = []) throws
  public init(_ object: Any)
  public init(parseJSON jsonString: Swift.String)
  public mutating func merge(with other: BleConnect.JSON) throws
  public func merged(with other: BleConnect.JSON) throws -> BleConnect.JSON
  public var type: BleConnect.`Type` {
    get
  }
  public var error: BleConnect.SwiftyJSONError? {
    get
  }
  public var object: Any {
    get
    set
  }
  @available(*, unavailable, renamed: "null")
  public static var nullJSON: BleConnect.JSON {
    get
  }
  public static var null: BleConnect.JSON {
    get
  }
}
public enum Index<T> : Swift.Comparable {
  case array(Swift.Int)
  case dictionary(Swift.DictionaryIndex<Swift.String, T>)
  case null
  public static func == (lhs: BleConnect.Index<T>, rhs: BleConnect.Index<T>) -> Swift.Bool
  public static func < (lhs: BleConnect.Index<T>, rhs: BleConnect.Index<T>) -> Swift.Bool
}
public typealias JSONIndex = BleConnect.Index<BleConnect.JSON>
public typealias JSONRawIndex = BleConnect.Index<Any>
extension BleConnect.JSON : Swift.Collection {
  public typealias Index = BleConnect.JSONRawIndex
  public var startIndex: BleConnect.JSON.Index {
    get
  }
  public var endIndex: BleConnect.JSON.Index {
    get
  }
  public func index(after i: BleConnect.JSON.Index) -> BleConnect.JSON.Index
  public subscript(position: BleConnect.JSON.Index) -> (Swift.String, BleConnect.JSON) {
    get
  }
  public typealias Element = (Swift.String, BleConnect.JSON)
  public typealias Indices = Swift.DefaultIndices<BleConnect.JSON>
  public typealias Iterator = Swift.IndexingIterator<BleConnect.JSON>
  public typealias SubSequence = Swift.Slice<BleConnect.JSON>
}
public enum JSONKey {
  case index(Swift.Int)
  case key(Swift.String)
}
public protocol JSONSubscriptType {
  var jsonKey: BleConnect.JSONKey { get }
}
extension Swift.Int : BleConnect.JSONSubscriptType {
  public var jsonKey: BleConnect.JSONKey {
    get
  }
}
extension Swift.String : BleConnect.JSONSubscriptType {
  public var jsonKey: BleConnect.JSONKey {
    get
  }
}
extension BleConnect.JSON {
  public subscript(path: [BleConnect.JSONSubscriptType]) -> BleConnect.JSON {
    get
    set
  }
  public subscript(path: BleConnect.JSONSubscriptType...) -> BleConnect.JSON {
    get
    set
  }
}
extension BleConnect.JSON : Swift.ExpressibleByStringLiteral {
  public init(stringLiteral value: Swift.StringLiteralType)
  public init(extendedGraphemeClusterLiteral value: Swift.StringLiteralType)
  public init(unicodeScalarLiteral value: Swift.StringLiteralType)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.StringLiteralType
  public typealias StringLiteralType = Swift.StringLiteralType
  public typealias UnicodeScalarLiteralType = Swift.StringLiteralType
}
extension BleConnect.JSON : Swift.ExpressibleByIntegerLiteral {
  public init(integerLiteral value: Swift.IntegerLiteralType)
  public typealias IntegerLiteralType = Swift.IntegerLiteralType
}
extension BleConnect.JSON : Swift.ExpressibleByBooleanLiteral {
  public init(booleanLiteral value: Swift.BooleanLiteralType)
  public typealias BooleanLiteralType = Swift.BooleanLiteralType
}
extension BleConnect.JSON : Swift.ExpressibleByFloatLiteral {
  public init(floatLiteral value: Swift.FloatLiteralType)
  public typealias FloatLiteralType = Swift.FloatLiteralType
}
extension BleConnect.JSON : Swift.ExpressibleByDictionaryLiteral {
  public init(dictionaryLiteral elements: (Swift.String, Any)...)
  public typealias Key = Swift.String
  public typealias Value = Any
}
extension BleConnect.JSON : Swift.ExpressibleByArrayLiteral {
  public init(arrayLiteral elements: Any...)
  public typealias ArrayLiteralElement = Any
}
extension BleConnect.JSON : Swift.RawRepresentable {
  public init?(rawValue: Any)
  public var rawValue: Any {
    get
  }
  public func rawData(options opt: Foundation.JSONSerialization.WritingOptions = JSONSerialization.WritingOptions(rawValue: 0)) throws -> Foundation.Data
  public func rawString(_ encoding: Swift.String.Encoding = .utf8, options opt: Foundation.JSONSerialization.WritingOptions = .prettyPrinted) -> Swift.String?
  public func rawString(_ options: [BleConnect.writingOptionsKeys : Any]) -> Swift.String?
  public typealias RawValue = Any
}
extension BleConnect.JSON : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
extension BleConnect.JSON {
  public var array: [BleConnect.JSON]? {
    get
  }
  public var arrayValue: [BleConnect.JSON] {
    get
  }
  public var arrayObject: [Any]? {
    get
    set
  }
}
extension BleConnect.JSON {
  public var dictionary: [Swift.String : BleConnect.JSON]? {
    get
  }
  public var dictionaryValue: [Swift.String : BleConnect.JSON] {
    get
  }
  public var dictionaryObject: [Swift.String : Any]? {
    get
    set
  }
}
extension BleConnect.JSON {
  public var bool: Swift.Bool? {
    get
    set
  }
  public var boolValue: Swift.Bool {
    get
    set
  }
}
extension BleConnect.JSON {
  public var string: Swift.String? {
    get
    set
  }
  public var stringValue: Swift.String {
    get
    set
  }
}
extension BleConnect.JSON {
  public var number: Foundation.NSNumber? {
    get
    set
  }
  public var numberValue: Foundation.NSNumber {
    get
    set
  }
}
extension BleConnect.JSON {
  public var null: Foundation.NSNull? {
    get
    set
  }
  public func exists() -> Swift.Bool
}
extension BleConnect.JSON {
  public var url: Foundation.URL? {
    get
    set
  }
}
extension BleConnect.JSON {
  public var double: Swift.Double? {
    get
    set
  }
  public var doubleValue: Swift.Double {
    get
    set
  }
  public var float: Swift.Float? {
    get
    set
  }
  public var floatValue: Swift.Float {
    get
    set
  }
  public var int: Swift.Int? {
    get
    set
  }
  public var intValue: Swift.Int {
    get
    set
  }
  public var uInt: Swift.UInt? {
    get
    set
  }
  public var uIntValue: Swift.UInt {
    get
    set
  }
  public var int8: Swift.Int8? {
    get
    set
  }
  public var int8Value: Swift.Int8 {
    get
    set
  }
  public var uInt8: Swift.UInt8? {
    get
    set
  }
  public var uInt8Value: Swift.UInt8 {
    get
    set
  }
  public var int16: Swift.Int16? {
    get
    set
  }
  public var int16Value: Swift.Int16 {
    get
    set
  }
  public var uInt16: Swift.UInt16? {
    get
    set
  }
  public var uInt16Value: Swift.UInt16 {
    get
    set
  }
  public var int32: Swift.Int32? {
    get
    set
  }
  public var int32Value: Swift.Int32 {
    get
    set
  }
  public var uInt32: Swift.UInt32? {
    get
    set
  }
  public var uInt32Value: Swift.UInt32 {
    get
    set
  }
  public var int64: Swift.Int64? {
    get
    set
  }
  public var int64Value: Swift.Int64 {
    get
    set
  }
  public var uInt64: Swift.UInt64? {
    get
    set
  }
  public var uInt64Value: Swift.UInt64 {
    get
    set
  }
}
extension BleConnect.JSON : Swift.Comparable {
}
public func == (lhs: BleConnect.JSON, rhs: BleConnect.JSON) -> Swift.Bool
public func <= (lhs: BleConnect.JSON, rhs: BleConnect.JSON) -> Swift.Bool
public func >= (lhs: BleConnect.JSON, rhs: BleConnect.JSON) -> Swift.Bool
public func > (lhs: BleConnect.JSON, rhs: BleConnect.JSON) -> Swift.Bool
public func < (lhs: BleConnect.JSON, rhs: BleConnect.JSON) -> Swift.Bool
public enum writingOptionsKeys {
  case jsonSerialization
  case castNilToNSNull
  case maxObjextDepth
  case encoding
  public static func == (a: BleConnect.writingOptionsKeys, b: BleConnect.writingOptionsKeys) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension BleConnect.JSON : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class CAN2_0TXModule {
  @objc deinit
}
@_hasMissingDesignatedInitializers open class GPSGNGGAInfo : Swift.Codable {
  @objc deinit
  open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers open class GPSGNVTGInfo : Swift.Codable {
  @objc deinit
  open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class ReadData<T> {
  @objc deinit
}
infix operator >>> : BitwiseShiftPrecedence
@_hasMissingDesignatedInitializers open class GPSGPGSAInfo : Swift.Codable {
  public var modeMA: Swift.Int?
  public var mode123: Swift.Int?
  public var nprn: Swift.Int?
  public var prn12: [Swift.Int]
  public var pdop: Swift.Int?
  public var hdop: Swift.Int?
  public var vdop: Swift.Int?
  @objc deinit
  open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public enum State : Swift.String {
  case scanning
  case scanningStoped
  case found
  case notFound
  case connecting
  case failledToConnect
  case connected
  case disConnected
  case authorized
  case unAuthorized
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class LAFCanInfoV1_Snapshot : Swift.Codable {
  public var parameterId: Swift.Int
  public var snapshotInterval: Swift.Int
  public var nsnapshots: Swift.Int
  public var parameterValueSize: Swift.Int
  public var parameterValue: BleConnect.ByteArray
  public var processedValues: [Swift.String]
  public var value: Swift.String?
  public func getSnapshotSize() -> Swift.Int
  public func writeSnapshotData(outBuffer: inout BleConnect.ByteArray, startPos: Swift.Int, maxPos: Swift.Int) -> Swift.Int
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
extension Swift.Array where Element == Swift.UInt8 {
  public func bytesToHex(spacing: Swift.String) -> Swift.String
}
@_hasMissingDesignatedInitializers open class GSMQENG_3 : Swift.Codable {
  public var bcch: Swift.Int?
  public var dbm: Swift.Int?
  public var bsic: Swift.Int?
  @objc deinit
  open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers open class ACE {
  public static let shared: BleConnect.ACE
  public var recivedData: ((BleConnect.JSON) -> ())?
  public func exec(command: BleConnect.JSON)
  public func setToken(token: BleConnect.JSON, phonePrivatKey: CryptoKit.Curve25519.KeyAgreement.PrivateKey, enableDebug: Swift.Bool = false)
  @objc deinit
}
@_hasMissingDesignatedInitializers open class GPSGLGSVInfoInner : Swift.Codable {
  @objc deinit
  open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers open class GPSGLGSVInfo : Swift.Codable {
  @objc deinit
  open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct BleConfig {
  public var isDebugEnabled: Swift.Bool
  public var rawBeaconDebug: Swift.Bool
  public var LA5BeaconDebug: Swift.Bool
  public var scanTimeout: Swift.Double
  public var connectionTimeout: Swift.Double
  public init(isDebugEnabled: Swift.Bool = false, scanTimeout: Foundation.TimeInterval = 30, connectionTimeout: Foundation.TimeInterval = 30)
}
@_hasMissingDesignatedInitializers open class GPSGLGSAInfo : Swift.Codable {
  @objc deinit
  open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers open class GPSGPGSVInfoInner : Swift.Codable {
  @objc deinit
  open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers open class GPSGPGSVInfo : Swift.Codable {
  @objc deinit
  open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public typealias Byte = Swift.UInt8
public typealias Long = Swift.UInt64
public typealias ByteArray = [Swift.UInt8]
public typealias Short = Swift.UInt16
public typealias Response = [Swift.String : Any]
public typealias numberOfPermissionCount = Swift.Int
extension BleConnect.SwiftyJSONError : Swift.Equatable {}
extension BleConnect.SwiftyJSONError : Swift.Hashable {}
extension BleConnect.SwiftyJSONError : Swift.RawRepresentable {}
extension BleConnect.`Type` : Swift.Equatable {}
extension BleConnect.`Type` : Swift.Hashable {}
extension BleConnect.`Type` : Swift.RawRepresentable {}
extension BleConnect.writingOptionsKeys : Swift.Equatable {}
extension BleConnect.writingOptionsKeys : Swift.Hashable {}
extension BleConnect.State : Swift.Equatable {}
extension BleConnect.State : Swift.Hashable {}
extension BleConnect.State : Swift.RawRepresentable {}
